<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;
use Illuminate\Support\Facades\Log;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //    $this->handleException();
        });
    }
    public function render($request, Throwable $exception)
    {
        Log::error('Http Exception', [
            'exception' => $exception
        ]);
        if ($this->isHttpException($exception)) {
            switch ($exception->getStatusCode()) {
                    // not authorized
                case '403':
                    return self::errorResponse($exception->getMessage(), 403);
                    break;
                    // not found
                case '404':
                    return  self::errorResponse($exception->getMessage(), 404);
                    break;
                    // internal error
                case '500':
                    return  self::errorResponse($exception->getMessage(), 500);
                    break;
                default:
                    return  self::errorResponse("Handler has returned an error", 502);
                    break;
            }
        } else {
            return  self::errorResponse("Something is going wrong we are working on it", 503);
        }
        return parent::render($request, $exception); // TODO: Change the autogenerated stub
    }

    public function errorResponse($message, $code)
    {
        return response()->json([
            'status' => false,
            'message' => $message,
            'data' => [],
            'code' => $code
        ]);
    }
}
